using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(SoftBodyObject))]
public class SoftBodyObjectEditor : Editor
{
    //Vector3
    SerializedProperty
        vertices;

    //int
    SerializedProperty
        fillFactor;

    //float
    SerializedProperty
        mass;

    //bool
    SerializedProperty
        isStatic,
        roundForces;

    //properties
    SerializedProperty
        massPointProperties,
        springProperties;

    bool editMode = false;


    private void OnEnable()
    {
        vertices = serializedObject.FindProperty("vertices");

        fillFactor = serializedObject.FindProperty("fillFactor");

        mass = serializedObject.FindProperty("mass");

        isStatic = serializedObject.FindProperty("isStatic");
        roundForces = serializedObject.FindProperty("roundForces");

        massPointProperties = serializedObject.FindProperty("massPointProperties");
        springProperties = serializedObject.FindProperty("springProperties");
    }

    public override void OnInspectorGUI()
    {
        var sb = target as SoftBodyObject;

        EditorGUI.BeginChangeCheck();
        serializedObject.Update();

        GUILayout.Space(10);
        GUILayoutOption[] layoutOptions = { GUILayout.Width(50), GUILayout.Height(40) };
        GUILayout.BeginHorizontal();
        if (GUILayout.Button("Edit", layoutOptions))
        {
            editMode = !editMode;
        }
        layoutOptions[0] = GUILayout.Width(75);
        if(GUILayout.Button("Show Point Grid", layoutOptions))
        {

        }
        GUILayout.EndHorizontal();
        
        GUILayout.Space(10);

        EditorGUILayout.PropertyField(mass);

        EditorGUILayout.PropertyField(fillFactor);

        EditorGUILayout.PropertyField(isStatic);
        EditorGUILayout.PropertyField(roundForces);
        GUILayout.Space(10);


        EditorGUILayout.PropertyField(massPointProperties);
        GUILayout.Space(10);

        EditorGUILayout.PropertyField(springProperties);
        GUILayout.Space(10);

        EditorGUILayout.PropertyField(vertices);

        
        if (EditorGUI.EndChangeCheck())
        {
            Undo.RecordObject(sb, "Changed SoftBodyObject Properties");
            serializedObject.ApplyModifiedProperties();
        }

        sb.OnEditorUpdate();
        Debug.Log("Updated Object");
    }

    void OnSceneGUI()
    {
        Debug.Log("DrawingPolygon");

        var sb = target as SoftBodyObject;

        EditorGUI.BeginChangeCheck();

        for (int i = 0; i < sb.vertices.Length; i++)
        {
            Handles.color = Color.green;

            float handleSize = HandleUtility.GetHandleSize(sb.transform.TransformPoint(sb.vertices[i])) * .05f;
            var mousePos = Helpers.GetMousePositionInEditor();

            




            Vector3 max;
            Vector3 min;

            if (i != sb.vertices.Length - 1)
            {
                Handles.DrawLine(sb.transform.TransformPoint(sb.vertices[i]), sb.transform.TransformPoint(sb.vertices[i + 1]));
            }
            else
            {
                Handles.DrawLine(sb.transform.TransformPoint(sb.vertices[i]), sb.transform.TransformPoint(sb.vertices[0]));
            }

            if (editMode)
            {
                sb.vertices[i] = sb.transform.InverseTransformPoint(Handles.FreeMoveHandle(
                sb.transform.TransformPoint(sb.vertices[i]),
                Quaternion.identity,
                handleSize,
                new Vector3(.1f, .1f, .1f),
                Handles.DotHandleCap));

                /**
                if (i != sb.vertices.Length - 1)
                {
                    max = new Vector3(
                        Mathf.Max(sb.transform.TransformPoint(sb.vertices[i]).x, sb.transform.TransformPoint(sb.vertices[i + 1]).x) + .5f, 
                        Mathf.Max(sb.transform.TransformPoint(sb.vertices[i]).y, sb.transform.TransformPoint(sb.vertices[i + 1]).y) + .5f, 0);
                    min = new Vector3(
                        Mathf.Min(sb.transform.TransformPoint(sb.vertices[i]).x, sb.transform.TransformPoint(sb.vertices[i + 1]).x) - .5f,
                        Mathf.Min(sb.transform.TransformPoint(sb.vertices[i]).y, sb.transform.TransformPoint(sb.vertices[i + 1]).y) - .5f, 0);
                }
                else
                {
                    max = new Vector3(
                        Mathf.Max(sb.transform.TransformPoint(sb.vertices[i]).x, sb.transform.TransformPoint(sb.vertices[0]).x) + .5f,
                        Mathf.Max(sb.transform.TransformPoint(sb.vertices[i]).y, sb.transform.TransformPoint(sb.vertices[0]).y) + .5f, 0);
                    min = new Vector3(                                                                                          
                        Mathf.Min(sb.transform.TransformPoint(sb.vertices[i]).x, sb.transform.TransformPoint(sb.vertices[0]).x) - .5f,
                        Mathf.Min(sb.transform.TransformPoint(sb.vertices[i]).y, sb.transform.TransformPoint(sb.vertices[0]).y) - .5f, 0);
                }

                if (mousePos.x <= max.x && mousePos.x >= min.x && mousePos.y <= max.y && mousePos.y >= min.y)
                {
                    GUI.SetNextControlName("Handle" + i + ',' + i + 1);
                    Vector3 handlePos, newPos;
                    if (i != sb.vertices.Length - 1)
                    {
                        handlePos = Helpers.ClosestPointOnLine(sb.vertices[i], sb.vertices[i + 1], mousePos);
                        newPos = sb.transform.InverseTransformPoint(Handles.FreeMoveHandle(
                        sb.transform.TransformPoint(handlePos),
                        Quaternion.identity,
                        handleSize * .75f,
                        new Vector3(.1f, .1f, .1f),
                        Handles.DotHandleCap));
                    }
                    else
                    {
                        handlePos = Helpers.ClosestPointOnLine(sb.vertices[i], sb.vertices[0], mousePos);
                        newPos = sb.transform.InverseTransformPoint(Handles.FreeMoveHandle(
                        sb.transform.TransformPoint(handlePos),
                        Quaternion.identity,
                        handleSize * .75f,
                        new Vector3(.1f, .1f, .1f),
                        Handles.DotHandleCap));
                    }
                    if(GUIUtility.hotControl != 0)
                    {
                        if(mousePos == handlePos)
                        {
                            sb.AddVertex(i, newPos);
                        }
                    }
                }
                **/
            }
            

        }

        if (EditorGUI.EndChangeCheck())
        {
            Undo.RecordObject(sb, "Changed SoftBodyObject's Polygon");
            serializedObject.ApplyModifiedProperties();
            sb.OnEditorUpdate();
        }

        if(editMode)
            SceneView.RepaintAll();
    }

    
}
